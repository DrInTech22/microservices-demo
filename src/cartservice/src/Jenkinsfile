pipeline {
    agent any
    tools {
        jdk 'JDK'
        nodejs 'nodejs'
    }
    environment { 
        SCANNER_HOME     = tool 'sonarqube-scanner'
        IMAGE_NAME       = 'cartservice'
        DOCKERHUB_ID     = 'maestrops'
        SONAR_SERVER_URL = 'http://34.229.74.176:9000/'
    }
    stages {
        stage ('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'GITHUB', url: 'https://github.com/DrInTech22/microservices-demo'
            }
        }
        stage ('SonarQube Analysis') {
            steps {
                dir('src/cartservice/src') {
                    withCredentials([string(credentialsId: 'sonar_token', variable: 'SONAR_AUTH_TOKEN')]) {
                        sh '''
                            export PATH="${WORKSPACE}/.dotnet:${HOME}/.dotnet/tools:$PATH"
                            echo $PATH
                            dotnet sonarscanner begin \
                            /k:$IMAGE_NAME \
                            /n:$IMAGE_NAME \
                            /d:sonar.host.url=$SONAR_SERVER_URL \
                            /d:sonar.token=$SONAR_AUTH_TOKEN
                            dotnet build cartservice.sln
                            dotnet sonarscanner end /d:sonar.token=$SONAR_AUTH_TOKEN
                            '''
                    }       
                }
            }
        }
        stage ('Build Docker Image') {
            steps {
                dir ('src/cartservice/src') {
                    sh '''
                        docker build -t $IMAGE_NAME .
                        docker tag $IMAGE_NAME $DOCKERHUB_ID/$IMAGE_NAME:${BUILD_NUMBER}
                        docker tag $IMAGE_NAME $DOCKERHUB_ID/$IMAGE_NAME:latest                     
                        '''
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image $DOCKERHUB_ID/$IMAGE_NAME:${BUILD_NUMBER} > trivy-$IMAGE_NAME-report.txt' 
                archiveArtifacts artifacts: "trivy-$IMAGE_NAME-report.txt" // Archive the report
                
            }
        }
        
        stage ('Push Image to DockerHub') {
            steps {
                withCredentials([vaultString(credentialsId: 'DOCKERHUB_PASS', variable: 'DOCKER_PASS')]) {
                    sh '''
                        docker tag $IMAGE_NAME $DOCKERHUB_ID/$IMAGE_NAME:${BUILD_NUMBER}
                        docker tag $IMAGE_NAME $DOCKERHUB_ID/$IMAGE_NAME:latest
                        echo $DOCKER_PASS | docker login -u $DOCKERHUB_ID --password-stdin
                        docker push $DOCKERHUB_ID/$IMAGE_NAME:${BUILD_NUMBER}
                        docker push $DOCKERHUB_ID/$IMAGE_NAME:latest
                       '''
                }  
            }
        }
    }
    post {
        always {
            echo 'Cleaning up workspace and removing Docker images...'
            cleanWs()
            sh '''
                docker rmi $DOCKERHUB_ID/$IMAGE_NAME:${BUILD_NUMBER} || true
                docker rmi $DOCKERHUB_ID/$IMAGE_NAME:latest || true
                docker rmi $IMAGE_NAME || true
            '''
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
